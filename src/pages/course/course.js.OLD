/*
 * Buzz - The Social LMS (https://www.buzzlms.de)
 * Â© 2017  Dennis Schulmeister-Zimolong <dennis@pingu-mail.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 */
"use strict";

import $ from "jquery";
import ko from "knockout";
import plugins from "../../app.js";

const _ = plugins["I18n"].translate;

let pageTypes = {
    single: require("./container-single.html"),
}

/**
 * ViewModel class for the course content page. This is actually the page
 * behind most if not everything which can be seen inside a course. Because
 * in reality a course is just a container for content pages.
 */
class CourseContentPage {
    constructor() {
        this.course = plugins["CoursePage"].course;

        this.courseName = ko.computed(() => {
            let language = plugins["I18n"].language();

            if (language in this.course.manifest.language && "name" in this.course.manifest.language[language]) {
                return this.course.manifest.language[language].name;
            } else if ("" in this.course.manifest.language && "name" in this.course.manifest.language[""]) {
                return this.course.manifest.language[""].name;
            } else {
                return this.course.id;
            }
        });

        this.page = {};
        this.subPage = {};
        this.registerKoComponents();

        this.languageSubscription = plugins["I18n"].language.subscribe(this.loadRequestedPage, this);
        this.loadRequestedPage(plugins["I18n"].language());
    }

    /**
     * Called by knockout.js when the component is about to be destroyed. In
     * our context this is when the SPA router is navigation to a new page.
     */
    dispose() {
        this.registerKoComponents("", "");
        this.languageSubscription.dispose();
    }

    /**
     * Load and display the currently requested course page. Which HTML file
     * is loaded depends on the currently active language and will be looked
     * up in the course manifest (course.json),
     *
     * @param {String} language Current language code
     */
    loadRequestedPage(language) {
        // Find the page to load for the current language. Usually this simply
        // means to look up the URL path in the course manifest. However it could
        // also be a sub-page where we actually need to find the parent page, first.
        let page = undefined;
        let subPage = undefined;

        let parentUrl = this.course.page.split("/");
        let subUrl = parentUrl.pop();
        parentUrl = parentUrl.join("/");

        if (language in this.course.manifest.language
              && "pages" in this.course.manifest.language[language]
              && this.course.page in this.course.manifest.language[language].pages) {
            // Direct page in current language
            page = this.course.manifest.language[language].pages[this.course.page];
        } else if ("" in this.course.manifest.language
                     && "pages" in this.course.manifest.language[""]
                     && this.course.page in this.course.manifest.language[""].pages) {
            // Direct page in fallback language
            page = this.course.manifest.language[""].pages[this.course.page];
        } else if (language in this.course.manifest.language
                     && "pages" in this.course.manifest.language[language]
                     && parentUrl in this.course.manifest.language[language].pages
                     && typeof(this.course.manifest.language[language].pages[parentUrl]) === "object"
                     && "pages" in this.course.manifest.language[language].pages[parentUrl]
                     && subUrl in this.course.manifest.language[language].pages[parentUrl].pages) {
            // Sub-page in current language
            page = this.course.manifest.language[language].pages[parentUrl];
            subPage = this.course.manifest.language[language].pages[parentUrl].pages[subUrl];
        } else if ("" in this.course.manifest.language
                     && "pages" in this.course.manifest.language[""]
                     && parentUrl in this.course.manifest.language[""].pages
                     && typeof(this.course.manifest.language[""].pages[parentUrl]) === "object"
                     && "pages" in this.course.manifest.language[""].pages[parentUrl]
                     && subUrl in this.course.manifest.language[""].pages[parentUrl].pages) {
            // Sub-page in fallback language
            page = this.course.manifest.language[""].pages[parentUrl];
            subPage = this.course.manifest.language[""].pages[parentUrl].pages[subUrl];
        }

        if (!page) {
            plugins["404"].show();
            return;
        }

        // Clean page definition
        let self = this;

        function _clean(url, page) {
            if (typeof(page) === "string") {
                page = {
                    file: page,
                };
            }

            if (!page.file) page.file = "";
            if (!page.pages) page.pages = {};
            if (!page.type) page.type = "single";

            if (!page.name) {
                if (url == "/") page.name = self.courseName();
                else page.name = page.file;
            }

            // Recursively traverse sub-pages
            if ("pages" in page) {
                for (let path in page.pages) {
                    page.pages[url + path] = _clean(path, page.pages[path]);
                }
            }

            return page;
        }

        page = _clean(this.course.page, page);

        // Load page content
        let contentUrl = this.course.baseUrl;

        if (subPage) {
            contentUrl += subPage.file;
        } else {
            contentUrl += page.file;
        }

        $.get({
            url: contentUrl
        }).done((data) => {
            // Show loaded page content
            this.page = page;
            this.subPage = subPage;

            this.registerKoComponents(pageTypes[page.type], data);

            plugins["Router"].pageName(page.name);
        }).fail((xhr, textStatus, error) => {
            // Failed to load the page content
            this.page = {};
            this.subPage = {};

            this.registerKoComponents();

            let msg = _("The page content could not be loaded. (Technical error: ${error})").replace("${error}", error);
            plugins["Toast"].error(msg);
            plugins["404"].show();
        });
    }

    registerKoComponents(containerHtml, pageHtml) {
        ko.components.unregister("course-container");
        ko.components.unregister("course-page");

        containerHtml = containerHtml || "<course-page></course-page>";
        pageHtml = pageHtml || "<span></span>";

        ko.components.register("course-page", {
            viewModel: { instance: this },
            template: pageHtml,
        });

        ko.components.register("course-container", {
            viewModel: { instance: this },
            template: containerHtml,
        });
    }
}

ko.components.register("course-content-page", {
    viewModel: CourseContentPage,
    template: require("./course-content.html"),
});

export { CourseContentPage };
